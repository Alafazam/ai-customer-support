// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(CUSTOMER)
  client    String?
  clientId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  CUSTOMER
  SUPPORT_AGENT
  ADMIN
}

// === Conversation Logging Schema ===

model Conversation {
  id                    String   @id @default(cuid())
  agentId               String
  conversationId        String   @unique // External conversation ID
  status                String
  eventTimestamp        DateTime
  startTimeUnixSecs     Int?
  callDurationSecs      Int?
  cost                  Int?
  callSuccessful        String?
  transcriptSummary     String?
  terminationReason     String?
  authorizationMethod   String?
  
  // Relations
  transcripts           ConversationTranscript[]
  metadata              ConversationMetadata?
  analysis              ConversationAnalysis?
  initiation            ConversationInitiation?
  deletionSettings      ConversationDeletionSettings?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([agentId])
  @@index([conversationId])
  @@index([eventTimestamp])
  @@index([status])
}

model ConversationTranscript {
  id                         String   @id @default(cuid())
  conversationId             String
  role                       String   // "agent" | "user"
  message                    String?
  timeInCallSecs             Int?
  feedback                   String?
  conversationTurnMetrics    String? // JSON string
  
  // Relations
  conversation               Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  toolCalls                  ToolCall[]
  toolResults                ToolResult[]
  
  createdAt                  DateTime @default(now())
  
  @@index([conversationId])
  @@index([role])
}

model ToolCall {
  id                    String   @id @default(cuid())
  transcriptId          String
  toolName              String
  toolFunction          String?
  parameters            String? // JSON string
  callTimestamp         DateTime?
  
  // Relations
  transcript            ConversationTranscript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  results               ToolResult[]
  
  @@index([transcriptId])
  @@index([toolName])
}

model ToolResult {
  id                    String   @id @default(cuid())
  toolCallId            String
  transcriptId          String
  result                String? // JSON string
  success               Boolean?
  error                 String?
  responseTimestamp     DateTime?
  
  // Relations
  toolCall              ToolCall @relation(fields: [toolCallId], references: [id], onDelete: Cascade)
  transcript            ConversationTranscript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  
  @@index([toolCallId])
  @@index([transcriptId])
}

model ConversationMetadata {
  id                         String   @id @default(cuid())
  conversationId             String   @unique
  startTimeUnixSecs          Int?
  callDurationSecs           Int?
  cost                       Int?
  authorizationMethod        String?
  terminationReason          String?
  
  // Feedback
  overallScore               Int?
  likes                      Int      @default(0)
  dislikes                   Int      @default(0)
  
  // Charging
  devDiscount                Boolean  @default(false)
  
  // Relations
  conversation               Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
}

model ConversationAnalysis {
  id                          String   @id @default(cuid())
  conversationId              String   @unique
  evaluationCriteriaResults   String? // JSON string
  dataCollectionResults       String? // JSON string
  callSuccessful              String?
  transcriptSummary           String?
  
  // Relations
  conversation                Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([callSuccessful])
}

model ConversationInitiation {
  id                         String   @id @default(cuid())
  conversationId             String   @unique
  
  // Agent override config
  agentPrompt                String?
  agentFirstMessage          String?
  agentLanguage              String?
  
  // TTS config
  ttsVoiceId                 String?
  
  // Custom data
  customLlmExtraBody         String? // JSON string
  dynamicVariables           String? // JSON string
  
  // Relations
  conversation               Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
}

model ConversationDeletionSettings {
  id                              String   @id @default(cuid())
  conversationId                  String   @unique
  deletionTimeUnixSecs            Int?
  deletedLogsAtTimeUnixSecs       Int?
  deletedAudioAtTimeUnixSecs      Int?
  deletedTranscriptAtTimeUnixSecs Int?
  deleteTranscriptAndPii          Boolean  @default(false)
  deleteAudio                     Boolean  @default(false)
  
  // Relations
  conversation                    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([deletionTimeUnixSecs])
}
